{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maxim.Karpov\\\\cypress\\\\react\\\\veriboy\\\\src\\\\components\\\\world\\\\Grid.js\",\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from \"three\";\nimport { useLoader } from 'react-three-fiber';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport grass from '../../textures/grass.jpg';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const grids = [];\n  const face = [1, 0, 0];\n  var [fl, setFl] = useState(props.flags);\n\n  const Flag = props => {\n    _s();\n\n    const Tile = useLoader(TextureLoader, \"/flags.jpg\");\n    const ref = useRef();\n    useEffect(() => void ref.current.lookAt(new THREE.Vector3(0, 1, 0)), [ref.current]);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      receiveShadow: true,\n      rotation: [-Math.PI / 2, 0, 0],\n      position: props.position,\n      ref: ref,\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        attach: \"geometry\",\n        args: [1, 5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: Tile,\n        attach: \"material\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this);\n  };\n\n  _s(Flag, \"uAl5lqL0zAX/lGtgPyJPBG6YvqM=\", false, function () {\n    return [useLoader];\n  });\n\n  const Square = props => {\n    _s2();\n\n    const Grass = useLoader(TextureLoader, \"/grass.jpg\");\n    const ref = useRef();\n    useEffect(() => void ref.current.lookAt(new THREE.Vector3(0, 1, 0)), [ref.current]);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      receiveShadow: true,\n      rotation: [-Math.PI / 2, 0, 0],\n      position: props.position,\n      ref: ref,\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        attach: \"geometry\",\n        args: [5, 5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: Grass,\n        attach: \"material\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s2(Square, \"CBlXugCPX95CTiDMTfhJSwCzGaE=\", false, function () {\n    return [useLoader];\n  });\n\n  const isFlag = (k, z) => {\n    let result = false;\n\n    for (let i = 0; i < fl.length; i++) {\n      if (fl[i][0] === k && fl[i][1] === z) {\n        result = true;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  for (var i = 0; i < props.width; i++) {\n    for (var j = 0; j < props.length; j++) {\n      // if (i !== 5) {\n      // grids.push(<Square position={[i,-0.5,j]}/>)\n      // } else {\n      //     grids.push(<Flag position={[i,-0.49,j]} />)\n      // }\n      if (!isFlag(i, j)) {\n        grids.push( /*#__PURE__*/_jsxDEV(Square, {\n          position: [i, -0.5, j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 24\n        }, this));\n      } else {\n        grids.push( /*#__PURE__*/_jsxDEV(Flag, {\n          position: [i, -0.49, j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 24\n        }, this));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: grids\n  }, void 0, false);\n};\n\n_s3(Grid, \"qgRH7b7AJA+iI2F7bIhsg6kf/nE=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/Maxim.Karpov/cypress/react/veriboy/src/components/world/Grid.js"],"names":["React","useRef","useEffect","useState","THREE","useLoader","TextureLoader","grass","Suspense","Grid","props","grids","face","fl","setFl","flags","Flag","Tile","ref","current","lookAt","Vector3","Math","PI","position","Square","Grass","isFlag","k","z","result","i","length","width","j","push"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\r\nimport * as THREE from \"three\";\r\nimport {useLoader } from 'react-three-fiber';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\r\nimport grass from '../../textures/grass.jpg'\r\nimport { Suspense } from 'react';\r\n\r\nconst Grid = (props) => {\r\n\r\nconst grids = [];\r\nconst face = [1,0,0];\r\nvar [fl, setFl] = useState(props.flags);\r\n\r\nconst Flag = (props) => {\r\n    const Tile = useLoader(TextureLoader, \"/flags.jpg\");\r\n \r\n    const ref = useRef();\r\n    useEffect(() => void ref.current.lookAt(new THREE.Vector3(0,1,0)), [ref.current])\r\n    \r\n    \r\n        return(<mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={props.position} ref={ref}>\r\n            <planeBufferGeometry attach=\"geometry\" args={[1,5]} />\r\n            <meshBasicMaterial map={Tile} attach=\"material\" />\r\n        </mesh>)\r\n }\r\n\r\n\r\n\r\nconst Square = (props) => {\r\n    const Grass = useLoader(TextureLoader, \"/grass.jpg\");\r\n \r\nconst ref = useRef();\r\nuseEffect(() => void ref.current.lookAt(new THREE.Vector3(0,1,0)), [ref.current])\r\n\r\n\r\n    return(<mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={props.position} ref={ref}>\r\n        <planeBufferGeometry attach=\"geometry\" args={[5,5]} />\r\n        <meshBasicMaterial map={Grass} attach=\"material\" />\r\n    </mesh>)\r\n}\r\n\r\nconst isFlag = (k,z) => {\r\n    let result = false;\r\n    for (let i = 0; i < fl.length; i++) {\r\n         if (fl[i][0] === k && fl[i][1] === z) {\r\n             result = true;\r\n             break;\r\n         }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfor(var i = 0; i<props.width; i++) {\r\n    for (var j = 0; j<props.length; j++) {  \r\n        // if (i !== 5) {\r\n        // grids.push(<Square position={[i,-0.5,j]}/>)\r\n        // } else {\r\n        //     grids.push(<Flag position={[i,-0.49,j]} />)\r\n        // }\r\n\r\n        if (!isFlag(i,j)) {\r\n            grids.push(<Square position={[i,-0.5,j]}/>)\r\n        } else {\r\n            grids.push(<Flag position={[i,-0.49,j]} />)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          {grids}  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Grid\r\n"]},"metadata":{},"sourceType":"module"}